{"version":3,"file":"europa-test.min.js","sources":["../src/EuropaTest.js"],"sourcesContent":["/*\n * Copyright (C) 2018 Alasdair Mercer, !ninja\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nconst { assert } = require('chai');\n\nconst fixtures = [\n  'content',\n  'lists',\n  'scaffolding',\n  'tables',\n  'unformatted-lists',\n  'visibility'\n];\n\n/**\n * A test runner for Europa Core test case based on a specific implementation.\n *\n * Mocha <b>must</b> be available in the current context when using <code>EuropaTest</code>.\n *\n * @public\n */\nclass EuropaTest {\n\n  /**\n   * Runs the Europa Core test cases based on the <code>options</code> provided.\n   *\n   * @param {Object} options - the options to be used\n   * @param {Function} options.Europa - the constructor for the {@link Europa} implementation to be tested\n   * @param {Function} options.loadFixture - a function that is passed the path of fixtures (relative to\n   * <code>europa-test</code>) to be loaded asynchronously\n   * @return {void}\n   * @public\n   */\n  static test(options) {\n    const { Europa, loadFixture } = options;\n    const europa = new Europa();\n\n    describe('europa-test', () => {\n      fixtures.forEach((fixture) => {\n        describe(`fixture-${fixture}`, () => {\n          let html;\n          let markdown;\n\n          before('load HTML fixture', (done) => {\n            loadFixture(`/fixtures/${fixture}.html`, (error, contents) => {\n              if (error) {\n                done(error);\n              } else {\n                html = contents;\n                done();\n              }\n            });\n          });\n\n          before('load Markdown fixture', (done) => {\n            loadFixture(`/fixtures/${fixture}.md`, (error, contents) => {\n              if (error) {\n                done(error);\n              } else {\n                markdown = contents;\n                done();\n              }\n            });\n          });\n\n          it('should correctly convert HTML into Markdown', () => {\n            assert.equal(europa.convert(html), markdown);\n          });\n        });\n      });\n    });\n  }\n\n}\n\nmodule.exports = EuropaTest;\n"],"names":["assert","require$$0","fixtures","[object Object]","options","Europa","loadFixture","europa","describe","forEach","fixture","html","markdown","before","done","error","contents","it","equal","convert"],"mappings":";kQAwBA,MAAMA,OAAEA,GAAWC,EAEbC,GACJ,UACA,QACA,cACA,SACA,oBACA,2BAsBAC,YAAYC,GACV,MAAMC,OAAEA,EAAMC,YAAEA,GAAgBF,EAC1BG,EAAS,IAAIF,EAEnBG,SAAS,cAAe,KACtBN,EAASO,QAASC,IAChBF,oBAAoBE,IAAW,KAC7B,IAAIC,EACAC,EAEJC,OAAO,oBAAsBC,IAC3BR,eAAyBI,SAAgB,CAACK,EAAOC,KAC3CD,EACFD,EAAKC,IAELJ,EAAOK,EACPF,SAKND,OAAO,wBAA0BC,IAC/BR,eAAyBI,OAAc,CAACK,EAAOC,KACzCD,EACFD,EAAKC,IAELH,EAAWI,EACXF,SAKNG,GAAG,8CAA+C,KAChDjB,EAAOkB,MAAMX,EAAOY,QAAQR,GAAOC"}